#!/usr/bin/env perl6
use v6;
use Sustenance;
use Sustenance::Parser::ParseTree;

# &to-json {{{

my Str:D &to-json = sub ($arg --> Str:D)
{
    Rakudo::Internals::JSON.to-json($arg);
};

# end &to-json }}}

# sub MAIN {{{

# --- gen-macros {{{

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :$d1! where .so,
    Str:D :$d2! where .so,
    Str:D :$t1! where .so,
    Str:D :$t2! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date1 .= new($d1);
    my Date $date2 .= new($d2);
    my Time:D $time1 = gen-time($t1);
    my Time:D $time2 = gen-time($t2);
    say($sustenance.gen-macros($date1, $date2, $time1, $time2));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :date($d)! where .so,
    Str:D :$t1! where .so,
    Str:D :$t2! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date .= new($d);
    my Time:D $time1 = gen-time($t1);
    my Time:D $time2 = gen-time($t2);
    say($sustenance.gen-macros($date, $time1, $time2));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :date($d)! where .so,
    Str:D :time($t)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date .= new($d);
    my Time:D $time = gen-time($t);
    say($sustenance.gen-macros($date, $time));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :$d1! where .so,
    Str:D :$d2! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date1 .= new($d1);
    my Date $date2 .= new($d2);
    say($sustenance.gen-macros($date1, $date2));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :date($d)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date .= new($d);
    say($sustenance.gen-macros($date));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    say($sustenance.gen-macros);
}

# --- end gen-macros }}}
# --- help {{{

multi sub MAIN(
    'help',
    Str:D $command?
    --> Nil
)
{
    USAGE($command);
}

# --- end help }}}
# --- ls {{{

multi sub MAIN(
    'ls',
    Str:D $file,
    Bool:D :foods($)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Hash:D @ls = $sustenance.ls(:foods);
    ls(@ls);
}

multi sub MAIN(
    'ls',
    Str:D $file,
    Bool:D :meals($)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Hash:D @ls = $sustenance.ls(:meals);
    ls(@ls);
}

sub ls(Hash:D @ls --> Nil)
{
    say(to-json(@ls));
}

# --- end ls }}}

# end sub MAIN }}}
# sub USAGE {{{

multi sub USAGE('gen-macros' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance gen-macros <file>
      sustenance [--date=<date>] gen-macros <file>
      sustenance [--date=<date> --time=<time>] gen-macros <file>
      sustenance [--date=<date> --t1=<time> --t2=<time>] gen-macros <file>
      sustenance [--d1=<date> --d2=<date>] gen-macros <file>
      sustenance [--d1=<date> --d2=<date> --t1=<time> --t2=<time>] gen-macros <file>

    Options
      --date=yyyy-mm-dd
        filter macros by date
      --d1=yyyy-mm-dd
      --d2=yyyy-mm-dd
        filter macros by date range
      --time=hh:mm:ss
        filter macros by time
      --t1=hh:mm:ss
      --t2=hh:mm:ss
        filter macros by time range
    EOF
    say($HELP);
}

multi sub USAGE('ls' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance --foods ls
      sustenance --meals ls

    Options
      --foods
        list foods
      --meals
        list meals
    EOF
    say($HELP);
}

multi sub USAGE(--> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance [-h] <command>

    Commands:
      help              show help for subcommands
      gen-macros        generate macronutrient profile
      ls                list data

    Options
      --help
        show this help message
    EOF
    say($HELP);
}

# end sub USAGE }}}

# vim: set filetype=perl6 foldmethod=marker foldlevel=0:
