#!/usr/bin/env raku
use v6;
use Sustenance;
use Sustenance::DietPlan;
use Sustenance::Parser::ParseTree;
use Sustenance::Types;

# &to-json {{{

my Str:D &to-json = sub ($arg --> Str:D)
{
    Rakudo::Internals::JSON.to-json($arg);
};

# end &to-json }}}

# sub MAIN {{{

# --- help {{{

multi sub MAIN(
    'help',
    Str:D $command?
    --> Nil
)
{
    USAGE($command);
}

# --- end help }}}
# --- ls {{{

multi sub MAIN(
    'ls',
    Bool:D :foods($)! where .so,
    Bool:D :meals($)! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my %ls = $sustenance.ls(:foods, :meals);
    ls(%ls);
}

multi sub MAIN(
    'ls',
    Bool:D :foods($)! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my %ls = $sustenance.ls(:foods);
    ls(%ls);
}

multi sub MAIN(
    'ls',
    Bool:D :meals($)! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my %ls = $sustenance.ls(:meals);
    ls(%ls);
}

multi sub MAIN(
    'ls',
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my %ls = $sustenance.ls;
    ls(%ls);
}

sub ls(%ls --> Nil)
{
    say(to-json(%ls));
}

# --- end ls }}}
# --- show {{{

# --- --- dietlog {{{

multi sub MAIN(
    'show',
    'dietlog',
    Str:D :$d1! where .so,
    Str:D :$d2! where .so,
    Str:D :$t1! where .so,
    Str:D :$t2! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my Date $date1 .= new($d1);
    my Date $date2 .= new($d2);
    my Time $time1 .= new($t1);
    my Time $time2 .= new($t2);
    my DietLog:D $diet-log =
        $sustenance.show(:diet-log, $date1, $date2, $time1, $time2);
    show($diet-log);
}

multi sub MAIN(
    'show',
    'dietlog',
    Str:D $file,
    Str:D :date($d)! where .so,
    Str:D :$t1! where .so,
    Str:D :$t2! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my Date $date .= new($d);
    my Time $time1 .= new($t1);
    my Time $time2 .= new($t2);
    my DietLog:D $diet-log =
        $sustenance.show(:diet-log, $date, $time1, $time2);
    show($diet-log);
}

multi sub MAIN(
    'show',
    'dietlog',
    Str:D $file,
    Str:D :date($d)! where .so,
    Str:D :time($t)! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my Date $date .= new($d);
    my Time $time .= new($t);
    my DietLog:D $diet-log =
        $sustenance.show(:diet-log, $date, $time);
    show($diet-log);
}

multi sub MAIN(
    'show',
    'dietlog',
    Str:D $file,
    Str:D :$d1! where .so,
    Str:D :$d2! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my Date $date1 .= new($d1);
    my Date $date2 .= new($d2);
    my DietLog:D $diet-log =
        $sustenance.show(:diet-log, $date1, $date2);
    show($diet-log);
}

multi sub MAIN(
    'show',
    'dietlog',
    Str:D $file,
    Str:D :date($d)! where .so,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my Date $date .= new($d);
    my DietLog:D $diet-log =
        $sustenance.show(:diet-log, $date);
    show($diet-log);
}

multi sub MAIN(
    'show',
    'dietlog',
    Str:D $file,
    *%opts (
        Str :diet-log($),
        Str :pantry($)
    )
    --> Nil
)
{
    my Sustenance $sustenance .= new(|%opts);
    my DietLog:D $diet-log =
        $sustenance.show(:diet-log);
    show($diet-log);
}

# --- --- end dietlog }}}
# --- --- dietplan {{{

multi sub MAIN(
    'show',
    'dietplan',
    Str:D :$weight! where .so,
    Str:D :$height! where .so,
    Str:D :$age! where .so,
    Str:D :$gender! where .so,
    Str:D :$activity-level! where .so
    --> Nil
)
{
    my Sustenance::DietPlan $diet-plan .= new(
        :$weight,
        :$height,
        :$age,
        :$gender,
        :$activity-level
    );
    show($diet-plan);
}

# --- --- end dietplan }}}

proto sub show($container --> Nil)
{
    my %hash = $container.hash;
    say(to-json(%hash));
}

multi sub show(DietLog:D $diet-log --> Nil)
{*}

multi sub show(Sustenance::DietPlan:D $diet-plan --> Nil)
{*}

# --- end show }}}

# end sub MAIN }}}
# sub USAGE {{{

multi sub USAGE('ls' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance [--foods] [--meals] ls

    Options:
      --foods
        list foods
      --meals
        list meals
    EOF
    say($HELP);
}

multi sub USAGE('show', 'dietplan' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance --weight=<body-weight-in-kg>
                 --height=<height-in-cm>
                 --age=<age-in-yrs>
                 --gender=<gender>
                 --activity-level=<activity-level>
                 show dietplan

    Options:
      --weight=<body-weight-in-kg>
        Body weight in kilograms
      --height=<height-in-cm>
        Height in centimeters
      --age=<age-in-yrs>
        Age in years
      --gender=<gender>
        Gender
      --activity-level=<activity-level>
        Activity level

    Gender
      | male
      | female

    Activity Level
      | sedentary
      |   If you get little or no exercise
      | lightly-active
      |   If you do light exercise 1-3 days per week
      | moderately-active
      |   If you do moderate exercise 3-5 days per week
      | very-active
      |   If you do hard exercise 6-7 days per week
      | extra-active
      |   If you do very hard exercise and have a physical job or do 2x training
    EOF
    say($HELP);
}

multi sub USAGE('show', 'dietlog' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance [--diet-log=<path>] [--pantry=<path>] show dietlog
      sustenance [--date=<date>] show dietlog
      sustenance [--date=<date> --time=<time>] show dietlog
      sustenance [--date=<date> --t1=<time> --t2=<time>] show dietlog
      sustenance [--d1=<date> --d2=<date>] show dietlog
      sustenance [--d1=<date> --d2=<date> --t1=<time> --t2=<time>] show dietlog

    Options:
      --date=<yyyy-mm-dd>
        filter macros by date
      --d1=<yyyy-mm-dd>, --d2=<yyyy-mm-dd>
        filter macros by date range
      --time=<hh:mm:ss>
        filter macros by time
      --t1=<hh:mm:ss>, --t2=<hh:mm:ss>
        filter macros by time range
    EOF
    say($HELP);
}

multi sub USAGE(--> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance [-h] <command>

    Commands:
      help        output help for subcommands
      show        show dietlog or dietplan
      ls          display information

    Options:
      -h, --help
        show this help message
    EOF
    say($HELP);
}

# end sub USAGE }}}

# vim: set filetype=raku foldmethod=marker foldlevel=0:
