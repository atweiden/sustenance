#!/usr/bin/env perl6
use v6;
use Sustenance;
use Sustenance::DietPlan;
use Sustenance::Types;

# &to-json {{{

my Str:D &to-json = sub ($arg --> Str:D)
{
    Rakudo::Internals::JSON.to-json($arg);
};

# end &to-json }}}

# sub MAIN {{{

# --- gen-diet-plan {{{

multi sub MAIN(
    'gen-diet-plan',
    Str:D :$weight! where .so,
    Str:D :$height! where .so,
    Str:D :$age! where .so,
    Str:D :$gender! where .so,
    Str:D :$activity-level! where .so
    --> Nil
)
{
    my Sustenance::DietPlan $diet-plan .=
        new(
            :$weight,
            :$height,
            :$age,
            :$gender,
            :$activity-level
        );
    gen-diet-plan($diet-plan.hash);
}

sub gen-diet-plan(%diet-plan --> Nil)
{
    say(to-json(%diet-plan));
}

# --- end gen-diet-plan }}}
# --- gen-macros {{{

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :$d1! where .so,
    Str:D :$d2! where .so,
    Str:D :$t1! where .so,
    Str:D :$t2! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date1 .= new($d1);
    my Date $date2 .= new($d2);
    my Time $time1 .= new($t1);
    my Time $time2 .= new($t2);
    gen-macros($sustenance.gen-macros($date1, $date2, $time1, $time2));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :date($d)! where .so,
    Str:D :$t1! where .so,
    Str:D :$t2! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date .= new($d);
    my Time $time1 .= new($t1);
    my Time $time2 .= new($t2);
    gen-macros($sustenance.gen-macros($date, $time1, $time2));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :date($d)! where .so,
    Str:D :time($t)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date .= new($d);
    my Time $time .= new($t);
    gen-macros($sustenance.gen-macros($date, $time));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :$d1! where .so,
    Str:D :$d2! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date1 .= new($d1);
    my Date $date2 .= new($d2);
    gen-macros($sustenance.gen-macros($date1, $date2));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file,
    Str:D :date($d)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Date $date .= new($d);
    gen-macros($sustenance.gen-macros($date));
}

multi sub MAIN(
    'gen-macros',
    Str:D $file
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    gen-macros($sustenance.gen-macros);
}

sub gen-macros(%gen-macros --> Nil)
{
    say(to-json(%gen-macros));
}

# --- end gen-macros }}}
# --- help {{{

multi sub MAIN(
    'help',
    Str:D $command?
    --> Nil
)
{
    USAGE($command);
}

# --- end help }}}
# --- ls {{{

multi sub MAIN(
    'ls',
    Str:D $file,
    Bool:D :foods($)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Hash:D @ls = $sustenance.ls(:foods);
    ls(@ls);
}

multi sub MAIN(
    'ls',
    Str:D $file,
    Bool:D :meals($)! where .so
    --> Nil
)
{
    my Sustenance $sustenance .= new(:$file);
    my Hash:D @ls = $sustenance.ls(:meals);
    ls(@ls);
}

sub ls(Hash:D @ls --> Nil)
{
    say(to-json(@ls));
}

# --- end ls }}}

# end sub MAIN }}}
# sub USAGE {{{

multi sub USAGE('gen-macros' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance gen-macros <file>
      sustenance [--date=<date>] gen-macros <file>
      sustenance [--date=<date> --time=<time>] gen-macros <file>
      sustenance [--date=<date> --t1=<time> --t2=<time>] gen-macros <file>
      sustenance [--d1=<date> --d2=<date>] gen-macros <file>
      sustenance [--d1=<date> --d2=<date> --t1=<time> --t2=<time>] gen-macros <file>

    Options:
      --date=<yyyy-mm-dd>
        filter macros by date
      --d1=<yyyy-mm-dd>, --d2=<yyyy-mm-dd>
        filter macros by date range
      --time=<hh:mm:ss>
        filter macros by time
      --t1=<hh:mm:ss>, --t2=<hh:mm:ss>
        filter macros by time range
    EOF
    say($HELP);
}

multi sub USAGE('gen-diet-plan' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance --weight=<body-weight-in-kg>
                 --height=<height-in-cm>
                 --age=<age-in-yrs>
                 --gender=<gender>
                 --activity-level=<activity-level>
                 gen-diet-plan

    Options:
      --weight=<body-weight-in-kg>
        Body weight in kilograms
      --height=<height-in-cm>
        Height in centimeters
      --age=<age-in-yrs>
        Age in years
      --gender=<gender>
        Gender
      --activity-level=<activity-level>
        Activity level

    Gender
      | male
      | female

    Activity Level
      | sedentary
      |   If you get little or no exercise
      | lightly-active
      |   If you do light exercise 1-3 days per week
      | moderately-active
      |   If you do moderate exercise 3-5 days per week
      | very-active
      |   If you do hard exercise 6-7 days per week
      | extra-active
      |   If you do very hard exercise and have a physical job or do 2x training
    EOF
    say($HELP);
}

multi sub USAGE('ls' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance --foods ls
      sustenance --meals ls

    Options:
      --foods
        list foods
      --meals
        list meals
    EOF
    say($HELP);
}

multi sub USAGE(--> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      sustenance [-h] <command>

    Commands:
      help             show help for subcommands
      gen-diet-plan    make diet plan
      gen-macros       count calories
      ls               display information

    Options:
      --help
        show this help message
    EOF
    say($HELP);
}

# end sub USAGE }}}

# vim: set filetype=perl6 foldmethod=marker foldlevel=0:
